parahprase this, and make it beautiful, simpler

In order to implement the algorithm, an event based node from the library adhoccomputing was used. This event based node has internal event queue.

And the messages between the nodes are published through channels. Channels are simply a projection of edges in the topology.

In general, the algorithm has 4 different types of events:

1. Want privilege
2. Release privilege
3. Get request message
4. Get reply message

Further details and declarations about the algorithm can be found in the documentation.

To test the algorithm, firstly a proper topology is created. For Raymond's algorithm, it is K-ary tree.

In order to create K-ary topology, we need the number of nodes and minimum and maximum number of children for every node.

We started from the root and add node with the random number between minimum and maximum number of children.

At last, our randomized K-ary tree with our boundaries is prepared.

Note:

1. If the minimum and maximum number of nodes are equal to 1, the topology behaves like a linked list.

2. If the minimum and maximum number of nodes are equal to 2, the topology behaves like a binary tree.

After creating the topology, all nodes are started.

Then randomly selected nodes triggered for wanting privilege with time distributed according to Poisson distribution.

Then, the tester waits all the nodes to be in a state of not wanting the privilege.

Finally the information of all nodes are gathered and summed up to get the benchmark results.

Results includes these:

1. Total want privilege
2. Total duplicate want privilege
3. Total used critical section
4. Total released critical section
5. Total request message received
6. Total token message received
7. Total request message sent
8. Total token message sent

The relation between total want privilege and sum of total request message and total token message gives the message complexity.

In addition, relation between total want privilege and total released critical section gives the practical proof of no starvation and fairness. 



bu yarı ingilizce yarı türkçe metni, akademik ingilizce haline çevir ve basitleştir

Teorik olarak en kötü senaryoda bütün topoloji bir linked list halindedir ve en dipteki node privilege isteği gönderdiğinde toplam 2*(N-1) adet mesaj iletilmesi gerekmektedir. Daha da genelleştirirsek en kötü ihtimalde oluşturulacak mesaj sayısı tree üzerine kurulmuş topolojide birbirine en uzak olan iki node arasındaki uzaklığın iki katı kadardır.

Yapılan deneylerde topolojide bir node un sahip olabileceği child sayısı en az 1 en fazla 16 olacak şekilde ayarlanmıştır. Deneylerdeki node sayısı ise 2nin kuvvetleri olacak şekildedir. 

yukarıdaki figür bize topoloji içerisinde bulunan node sayısına karşılık privilege isteği başına düşen toplam mesaj sayısının grafiğini göstermektedir. yatay eksende topoloji içerisinde bulunan node sayısı, dikey eksende ise privilege isteği başına düşen toplam mesaj sayısı bulunmaktadır.

Görüleceği üzere bir privilege isteği başına düşen mesaj sayısı 2*(N-1) sayısını aşmamış, bunun yanında logN sayısına yakınsamıştır.



yukarıdaki figür bize topoloji içerisinde bulunan node sayısına ve tamamı dolu bir k-ary tree nin k sayısına karşılık privilege isteği başına düşen mesaj sayısını göstermektedir.

Görüleceği üzere K sayısı 1 e eşit olduğunda, sistem linked list gibi çalışıp, 2*(N-1) mesaj sayısını geçmemektedir. K sayısı arttıkça, mesaj sayısı logK(N) sayısına yakınsamaktadır.



bu yarı ingilizce yarı türkçe metni, akademik ingilizce haline çevir ve basitleştir


Sonuç olarak, topolojinin yapısına bağlı olarak mesaj sayısının belirlendiği ama ortalama yoğunluğun logK(N) sayısına yakınsadığı bir algoritma görüyoruz. Topolojide yer alan her bir node un hafızasında en fazla K adet istek biriktiğini gözlemleyebiliriz. Message ve memory complexity açısından tercih edilebilir bir algoritma. Fakat topoloji içerisinde yer alan herhangi bir node fail ettiğinde, onun altında yer alan bütün node ların privilege elde etmesi engellemiş olur. Eğer root node fail ederse, o anda privilege root node un hangi dalında bulunuyorsa, artık sadece o dalın içerisindeki node lar privilege sahibi olabilir. K sayısı büyük olduğunda bu durumdan etkilenecek node sayısı da artar. K sayısı küçüldüğünde ise en uzak iki node arasındaki mesafe artacağı için bir privilege isteği başına ortalama mesaj sayısı da artacaktır.



convert these paragraphs into conclusion section with two paragraphs, make it simpler and less detail, just say about the positive and negative sides of the algorithm.

Theoretically, in the worst-case scenario, the entire topology is represented as a linked list, and when the bottom node sends a privilege request, a total of 2*(N-1) messages need to be transmitted. To generalize further, in the worst case, the number of messages to be generated in a topology based on a tree between the two nodes farthest apart from each other is twice the distance between them.

In the experiments, the number of children a node can have in the topology is adjusted to be at least 1 and at most 16. The number of nodes in the experiments is in powers of 2.

The above figure illustrates the graph of the total number of messages per privilege request against the number of nodes in the topology on the horizontal axis and the total number of messages per privilege request on the vertical axis.

As observed, the number of messages per privilege request has not exceeded the value of 2*(N-1), and it approaches the value of logN.

The above figure illustrates the relationship between the number of nodes in the topology and the number of messages per privilege request for a fully populated k-ary tree, where k is the number of children per node.

As seen, when k equals 1, the system operates like a linked list, not exceeding the number of messages at 2*(N-1). As k increases, the number of messages approaches logK(N).

In conclusion, we observe an algorithm where the number of messages is determined based on the structure of the topology, but the average density converges to approximately logK(N). We can observe that each node in the topology can accumulate up to K requests in its memory. It is a preferable algorithm in terms of message and memory complexity. However, if any node within the topology fails, it prevents all nodes below it from obtaining privileges. If the root node fails, only the nodes within the branch where the root node is located can have privileges. When K is large, the number of affected nodes increases. Conversely, when K decreases, the distance between the two farthest nodes increases, leading to an increase in the average number of messages per privilege request.